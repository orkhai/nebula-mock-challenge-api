{
  "version": 3,
  "sources": ["../../../../../src/controllers/auth/confirmSignup.ts", "../../../../../src/utils/auth.ts", "../../../../../src/lib/cognitoClient.ts"],
  "sourcesContent": ["import { ConfirmSignUpCommand } from \"@aws-sdk/client-cognito-identity-provider\";\nimport { getSecretHash } from \"../../utils/auth\";\nimport { cognitoClient } from \"../../lib/cognitoClient\";\nimport { APIGatewayProxyHandler } from \"aws-lambda\";\n\nexport const confirmSignup: APIGatewayProxyHandler = async (event: any) => {\n  const { preferred_username, confirmationCode } = JSON.parse(event.body);\n\n  try {\n    if (!preferred_username || !confirmationCode) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: \"Username and confirmation code are required\",\n        }),\n      };\n    }\n\n    const command = new ConfirmSignUpCommand({\n      ClientId: process.env.COGNITO_APP_CLIENT_ID ?? \"\",\n      Username: preferred_username,\n      ConfirmationCode: confirmationCode,\n      SecretHash: getSecretHash(preferred_username),\n    });\n\n    await cognitoClient.send(command);\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ message: \"User account confirmed successfully\" }),\n    };\n  } catch (error: any) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: error.message,\n      }),\n    };\n  }\n};\n", "import crypto from \"crypto\";\n\nexport function getSecretHash(username: string): string {\n  return crypto\n    .createHmac(\"SHA256\", process.env.COGNITO_APP_SECRET ?? \"\")\n    .update(username + (process.env.COGNITO_APP_CLIENT_ID ?? \"\"))\n    .digest(\"base64\");\n}\n", "import { CognitoIdentityProviderClient } from \"@aws-sdk/client-cognito-identity-provider\";\n\nexport const cognitoClient = new CognitoIdentityProviderClient({\n  region: process.env.AWS_REGION,\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,2CAAqC;;;ACArC,oBAAmB;AAEZ,SAAS,cAAc,UAA0B;AACtD,SAAO,cAAAC,QACJ,WAAW,UAAU,QAAQ,IAAI,sBAAsB,EAAE,EACzD,OAAO,YAAY,QAAQ,IAAI,yBAAyB,GAAG,EAC3D,OAAO,QAAQ;AACpB;;;ACPA,8CAA8C;AAEvC,IAAM,gBAAgB,IAAI,sEAA8B;AAAA,EAC7D,QAAQ,QAAQ,IAAI;AACtB,CAAC;;;AFCM,IAAM,gBAAwC,OAAO,UAAe;AACzE,QAAM,EAAE,oBAAoB,iBAAiB,IAAI,KAAK,MAAM,MAAM,IAAI;AAEtE,MAAI;AACF,QAAI,CAAC,sBAAsB,CAAC,kBAAkB;AAC5C,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU;AAAA,UACnB,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,UAAU,IAAI,8DAAqB;AAAA,MACvC,UAAU,QAAQ,IAAI,yBAAyB;AAAA,MAC/C,UAAU;AAAA,MACV,kBAAkB;AAAA,MAClB,YAAY,cAAc,kBAAkB;AAAA,IAC9C,CAAC;AAED,UAAM,cAAc,KAAK,OAAO;AAEhC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,sCAAsC,CAAC;AAAA,IACzE;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS,MAAM;AAAA,MACjB,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": ["import_client_cognito_identity_provider", "crypto"]
}

{
  "version": 3,
  "sources": ["../../../../../src/controllers/score/getLeaderboard.ts", "../../../../../src/lib/dynamoClient.ts"],
  "sourcesContent": ["import { APIGatewayProxyHandler } from \"aws-lambda\";\nimport dynamoClient from \"../../lib/dynamoClient\";\nimport { ScanCommand } from \"@aws-sdk/lib-dynamodb\";\n\nexport const getLeaderboard: APIGatewayProxyHandler = async (event) => {\n  try {\n    const data = await dynamoClient.send(\n      new ScanCommand({\n        TableName: process.env.LEADERBOARD_TABLE_NAME,\n      })\n    );\n\n    const items = data.Items || [];\n    items.sort((a: any, b: any) => (b.score || 0) - (a.score || 0));\n    const topScore = items.slice(0, 1);\n    return { statusCode: 200, body: JSON.stringify({ topScore }) };\n  } catch (error: any) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message: error.message }),\n    };\n  }\n};\n", "import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nimport { DynamoDBDocumentClient } from \"@aws-sdk/lib-dynamodb\";\n\nconst client = new DynamoDBClient({\n  region: process.env.AWS_REGION,\n});\n\nconst dynamoClient = DynamoDBDocumentClient.from(client);\n\nexport default dynamoClient;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,6BAA+B;AAC/B,0BAAuC;AAEvC,IAAM,SAAS,IAAI,sCAAe;AAAA,EAChC,QAAQ,QAAQ,IAAI;AACtB,CAAC;AAED,IAAM,eAAe,2CAAuB,KAAK,MAAM;AAEvD,IAAO,uBAAQ;;;ADPf,IAAAA,uBAA4B;AAErB,IAAM,iBAAyC,OAAO,UAAU;AACrE,MAAI;AACF,UAAM,OAAO,MAAM,qBAAa;AAAA,MAC9B,IAAI,iCAAY;AAAA,QACd,WAAW,QAAQ,IAAI;AAAA,MACzB,CAAC;AAAA,IACH;AAEA,UAAM,QAAQ,KAAK,SAAS,CAAC;AAC7B,UAAM,KAAK,CAAC,GAAQ,OAAY,EAAE,SAAS,MAAM,EAAE,SAAS,EAAE;AAC9D,UAAM,WAAW,MAAM,MAAM,GAAG,CAAC;AACjC,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,SAAS,CAAC,EAAE;AAAA,EAC/D,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,MAAM,QAAQ,CAAC;AAAA,IACjD;AAAA,EACF;AACF;",
  "names": ["import_lib_dynamodb"]
}

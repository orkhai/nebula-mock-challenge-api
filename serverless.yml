service: nebula-mock-challenge
useDotenv: true
plugins:
  - serverless-dotenv-plugin
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: ${env:AWS_REGION}
  environment:
    AWS_REGION: ${env:AWS_REGION}
    COGNITO_APP_CLIENT_ID: ${env:COGNITO_APP_CLIENT_ID}
    COGNITO_APP_SECRET: ${env:COGNITO_APP_SECRET}
    LEADERBOARD_TABLE_NAME: ${env:LEADERBOARD_TABLE_NAME}
    WEBSOCKET_CONNECTION_URL: ${env:WEBSOCKET_CONNECTION_URL}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:DeleteItem
          Resource:
            - ${env:LEADERBOARD_TABLE_ARN}
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource: "arn:aws:execute-api:${env:AWS_REGION}:*:*/*/@connections/*"

functions:
  signup:
    handler: src/controllers/auth/register.register
    events:
      - http:
          path: auth/register
          method: post
          cors: true

  confirmSignup:
    handler: src/controllers/auth/confirmSignup.confirmSignup
    events:
      - http:
          path: auth/confirm-signup
          method: post
          cors: true

  login:
    handler: src/controllers/auth/login.login
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  submitScore:
    handler: src/controllers/score/submitScore.submitScore
    events:
      - http:
          path: scores/submit
          method: post
          cors: true

  getLeaderboard:
    handler: src/controllers/score/getLeaderboard.getLeaderboard
    events:
      - http:
          path: scores/top
          method: get
          cors: true

  websocketConnect:
    handler: src/controllers/websocket.onConnect.onConnect
    events:
      - websocket:
          route: $connect

  websocketDisconnect:
    handler: src/controllers/websocket.onDisconnect.onDisconnect
    events:
      - websocket:
          route: $disconnect

  websocketDefault:
    handler: src/controllers/websocket.defaultHandler
    events:
      - websocket:
          route: $default

resources:
  Resources:
    LeaderboardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:LEADERBOARD_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

custom:
  serverless-offline:
    httpPort: 5000
